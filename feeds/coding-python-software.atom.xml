<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kmonsoor's tech posts</title><link href="http://blog.kmonsoor.com/" rel="alternate"></link><link href="http://blog.kmonsoor.com/feeds/coding-python-software.atom.xml" rel="self"></link><id>http://blog.kmonsoor.com/</id><updated>2014-01-27T15:20:00+06:00</updated><entry><title>Python: Some Performance Scores</title><link href="http://blog.kmonsoor.com/python-some-performance-scores.html" rel="alternate"></link><updated>2014-01-27T15:20:00+06:00</updated><author><name>kmonsoor</name></author><id>tag:blog.kmonsoor.com,2014-01-27:python-some-performance-scores.html</id><summary type="html">&lt;p&gt;I just finished reading &lt;a href="http://sebastianraschka.com/Articles/2014_python_performance_tweaks.html" title="Sebastian Raschka's analytic discussion of Pyhton tweaks"&gt;Sebastian Raschka's analytic discussion of
Pyhton
tweaks&lt;/a&gt; where
the author tested with Python version: &lt;strong&gt;&lt;em&gt;3.3.3&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now, as I am a huge "fan" of Pythonic 1-liners, I made a summary of the
article containing 1-liner-analysis-result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding elements to dictionaries&lt;/strong&gt;&lt;br /&gt;
Adding keys "By exploiting thrown KeyError exceptions via an try-except
loop" is slightly(\~1.2x) faster than "(first,) checking if a key
already exists in the Python dictionary using if-else loop"&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Filtering lists via (simple) conditional statements&lt;/strong&gt;&lt;br /&gt;
List comprehension is \~1.5x faster than typical if-else loop, and
\~1.8x faster than "list(filter(lambda..." combination.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating lists using function calls&lt;/strong&gt;&lt;br /&gt;
Using built-in map() method is \~3.4x faster than the for-loop, and \~
1.5x faster than list comprehension approach.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"So the bottom line of this analysis is that list comprehensions are
ideal to create lists using simple evaluations via if-statements, and
the in-built map() is the way to go for creating lists via function
calls."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Concatenating strings&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"The .join() method is \~ 23x faster than the usage of the + operator
to concatenate strings!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Assembling strings&lt;/strong&gt;&lt;br /&gt;
Using the + operator to format(&amp;amp; concate) strings performs similar as
'%' string formatting operator.&lt;/p&gt;
&lt;p&gt;However, the format() function is, relatively, extremely slower (\~10x).&lt;/p&gt;
&lt;p&gt;Thanks for reading. For further digging, you can also find all the
details from the author in this Github repository:
&lt;a href="https://github.com/rasbt/python_efficiency_tweaks"&gt;https://github.com/rasbt/python_efficiency_tweaks&lt;/a&gt;&lt;/p&gt;</summary><category term="coding"></category><category term="improvement"></category><category term="micro-optimization"></category><category term="performance"></category><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="tweak"></category></entry></feed>